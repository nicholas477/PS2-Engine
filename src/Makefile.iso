$(ISO_FOLDER_DIR):
	$(MKDIR) -p $(ISO_FOLDER_DIR)

$(ISO_FOLDER_DIR)/SYSTEM.CNF: $(ISO_FOLDER_DIR)
	cp SYSTEM.CNF $@

IRX_FILES = \
	audsrv.irx \
	ps2snd.irx \
	ps2dev9.irx \
	netman.irx \
	usbd.irx \
	ps2kbd.irx \
	smap.irx

IRX_SRC_FILES := $(addprefix $(PS2SDK)/iop/irx/, $(IRX_FILES))
IRX_TARGET_FILES := $(addprefix $(ISO_FOLDER_DIR)/, $(IRX_FILES))

$(IRX_TARGET_FILES): $(ISO_FOLDER_DIR)/%.irx: $(PS2SDK)/iop/irx/%.irx
	$(MKDIR) -p $(ISO_FOLDER_DIR)
	cp $< $@

copy_irx: $(IRX_TARGET_FILES)

$(ISO_FOLDER_DIR)/ps2client.exe: $(ISO_FOLDER_DIR)
	cp assets/ps2client.exe $@

copy_libs: copy_irx $(ISO_FOLDER_DIR)/ps2client.exe

# Sound files
AUDIO_FILE_TYPE = wav
SOUND_INPUT_FILES = $(wildcard assets/*.$(AUDIO_FILE_TYPE)) $(wildcard assets/**/*.wav)
SOUND_ISO_FILES = $(SOUND_INPUT_FILES:%.wav=$(ISO_FOLDER_DIR)/%.$(AUDIO_FILE_TYPE))
$(SOUND_ISO_FILES): $(ISO_FOLDER_DIR)/assets/%.$(AUDIO_FILE_TYPE): assets/%.wav
	$(MKDIR) -p $(dir $@)
#	adpenc $< $@
	cp $< $@

.PHONY: sounds
sounds: $(SOUND_ISO_FILES)

# Texture compilation
TEXTURE_CC = egg-ps2-mesh-converter
JSON_TEXTURE_SRC_FILES = $(wildcard assets/textures/*.json) $(wildcard assets/textures/**/*.json)
JSON_TEXTURE_FILES := $(JSON_TEXTURE_SRC_FILES:%.json=$(ISO_FOLDER_DIR)/%.tex)

$(JSON_TEXTURE_FILES): $(ISO_FOLDER_DIR)/assets/textures/%.tex: assets/textures/%.json
	$(MKDIR) -p $(dir $@)
	$(TEXTURE_CC) $< $@

.PHONY: textures
textures: $(JSON_TEXTURE_FILES)

# Model compilation
MODEL_CC = egg-ps2-mesh-converter
JSON_MODEL_SRC_FILES = $(wildcard assets/models/*.json) $(wildcard assets/models/**/*.json)
JSON_MODEL_FILES := $(JSON_MODEL_SRC_FILES:%.json=$(ISO_FOLDER_DIR)/%.mdl)

$(JSON_MODEL_FILES): $(ISO_FOLDER_DIR)/assets/models/%.mdl: assets/models/%.json
	$(MKDIR) -p $(dir $@)
	$(MODEL_CC) $< $@

.PHONY: models
models: $(JSON_MODEL_FILES) 

# Level files
LEVEL_SRC_FILES = $(shell find assets/ -name "*.lvl")
LVL_DEST_FILES := $(LEVEL_SRC_FILES:%.lvl=$(ISO_FOLDER_DIR)/%.lvl)

$(LVL_DEST_FILES): $(ISO_FOLDER_DIR)/assets/%.lvl: assets/%.lvl
	$(MKDIR) -p $(dir $@)
	cp $< $@

.PHONY: levels
levels: $(LVL_DEST_FILES)

# Asset Manifest compilation
.PHONY: manifestassets
manifestassets: sounds models levels textures

MANIFEST_CC = egg-ps2-manifest-generator

$(ISO_FOLDER_DIR)/MANIFEST.ISO: manifestassets
	$(MANIFEST_CC) -i$(ISO_FOLDER_DIR)/assets -p assets/ -o$@

$(ISO_FOLDER_DIR)/MANIFEST.HST: manifestassets
	$(MANIFEST_CC) -i$(ISO_FOLDER_DIR)/assets -p assets/ -o$@ --convert_path=false

.PHONY: manifests
manifests: $(ISO_FOLDER_DIR)/MANIFEST.ISO $(ISO_FOLDER_DIR)/MANIFEST.HST

.PHONY: isoassets
isoassets: $(ISO_FOLDER_DIR)/SYSTEM.CNF copy_libs sounds models levels manifests

GREEN='\033[0;32m'
NC='\033[0m'

VERSION?=$(shell git rev-parse --short HEAD)
ISO_FLAGS?=-A "EGG PS2 Engine" -V "EGG-Engine:$(VERSION)"

$(ISO_TGT): isoassets $(EE_BIN)
	$(MKDIR) -p $(ISO_FOLDER_DIR)
	@echo -e ${GREEN}PACKAGING ISO${NC}
	mkisofs $(ISO_FLAGS) -o $(ISO_TGT) $(ISO_FOLDER_DIR)

.PHONY: iso
iso: $(ISO_TGT)

SMB_ISO = /netmnt/nas/Shared/PS2SMB/DVD/$(notdir $(ISO_TGT))

$(SMB_ISO): $(ISO_TGT)
	cp $(ISO_TGT) $(SMB_ISO)

deploy_iso: $(SMB_ISO)

.PHONY: cleaniso
cleaniso:
	rm -rf $(ISO_FOLDER_DIR)
	rm -rf $(ISO_TGT)
	rm -rf $(SMB_ISO)